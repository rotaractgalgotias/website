generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      Roles     @default(EDITOR)
  verified  Boolean   @default(false)
  firstTime Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Roles {
  ADMIN
  EDITOR
}

model Event {
  id                 String    @id @default(cuid())
  title              String
  slug               String    @unique
  description        String
  content            String    // Stores MDX content for the event
  date               DateTime  // The date of the event
  location           String    // Event location
  numberOfVolunteers Int?      // Number of volunteers who participated
  peopleImpacted     Int?      // Number of people impacted by the event
  duration           Int?      // Duration of the event in hours
  coverImage         String
  featured           Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  yearId             String
  year               Year     @relation(fields: [yearId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id          String    @id @default(cuid())
  action      ActivityActions
  timestamp   DateTime  @default(now())
  details     String?   // Optional details about the action
}

enum ActivityActions {
  CREATE
  UPDATE
  DELETE
}

model Year {
  id      String   @id @default(cuid())
  year    Int      @unique // Stores the year (e.g., 2024)
  imageUrl String?  // URL to the year's image

  events  Event[]  // Related events for this year
  roles   MemberRole[] // Related member roles for this year
  newsletters Newsletter[] // Related newsletters for this year
}

model Member {
  id        String       @id @default(cuid())
  name      String
  imageUrl  String       // URL to the member's profile image
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  collegeId String       @default("cm3lmrtyx0000xz75u4u9jg35")
  college   College      @relation(fields: [collegeId], references: [id])
  verified  Boolean      @default(false)

  // New fields to store the member's details
  email     String?
  phone     String?
  year      String?          // Year the member joined the club
  branch    String?       // Branch of study
  whatsappNumber String? // WhatsApp number
  referralSource String? // How the member heard about the club
  membershipType String?
  
  // New field to relate to the historical roles
  roles      MemberRole[]
}

model College {
  id        String    @id @default(cuid())
  name      String
  whatsappGroupLink String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  members    Member[]
}

model MemberRole {
  id         String     @id @default(cuid())
  position   Position   // Position held by the member for this year
  memberType MemberType // Type of member (e.g., COUNCIL, DIRECTOR)
  year       Year       @relation(fields: [yearId], references: [id], onDelete: Cascade)  // Added cascade delete
  yearId     String
  member     Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)  // Added cascade delete
  memberId   String

   @@unique([memberId, yearId]) // Ensure each member has only one role per year
}

enum MemberType {
  COUNCIL    // Board Council
  DIRECTOR   // Board of Directors
  COORDINATOR // Coordinator
  MEMBER     // Regular Member
}

enum Position {
  PRESIDENT
  SECRETARY
  VICE_PRESIDENT
  SERGEANT_AT_ARMS
  JOINT_SECRETARY
  TREASURER
  DIRECTORIAL_COMMITTEE_CHAIR
  PUBLIC_RELATION_OFFICER
  CLUB_SERVICE
  COMMUNITY_SERVICE
  VOCATIONAL_SERVICE
  INTERNATIONAL_SERVICE
  LITERARY_SERVICE
  MEDIA_SERVICE
  PUBLIC_RELATION_SERVICES
  PROFESSIONAL_DEVELOPMENT
  SOCIAL_MEDIA
  PERFORMING_ARTS_HEAD
  TECHNICAL_SERVICES
  MANAGEMENT_TEAM_HEAD
  MEMBER
  MULTIMEDIA_SERVICE // for backward compatibility
  PHOTOGRAPHY_SERVICE // for backward compatibility
}

model Newsletter {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  published  Boolean  @default(false)
  month      String
  totalPages Int
  pdfUrl     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  yearId     String?
  year       Year?    @relation(fields: [yearId], references: [id], onDelete: Cascade)
}